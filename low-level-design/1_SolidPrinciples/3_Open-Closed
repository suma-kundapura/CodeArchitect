# Open-Closed Principle (OCP) – A Deep Dive

The Open-Closed Principle (OCP) is one of the five SOLID principles of object-oriented design.
It ensures that our code is flexible, maintainable, and scalable while reducing the risk of
 breaking existing functionality.

---

## What is the Open-Closed Principle?
 Definition:
"Software entities (classes, modules, functions) should be open for extension but closed for modification."

### What Does This Mean?
 Open for extension → You should be able to add new functionality without modifying existing code.
 Closed for modification → Existing code should not be changed whenever new requirements are introduced.

---

## Why is OCP Important?
If we modify existing classes frequently, we risk:
 Introducing new bugs – Changes might break existing functionality.
 Violating the SRP (Single Responsibility Principle) – If a class is modified for different reasons,
 it starts handling multiple responsibilities.
 Making code harder to test – A small change might require extensive retesting.

By following OCP, we achieve:
 More maintainable code – New features are added without affecting the existing system.
 Better scalability – As requirements evolve, we can extend behavior without rewriting existing code.
 Easier testing – Existing logic remains untouched, reducing regression risks.

---

## Real-World Example – Violating OCP
### Scenario:
Let’s say we have a discount calculation system. Initially, it only supports regular discounts, but later, we need to add festival discounts.

### Code that Violates OCP (Bad Design)
```java
class DiscountCalculator {
    public double calculateDiscount(String customerType, double amount) {
        if (customerType.equals("Regular")) {
            return amount * 0.10; // 10% discount for regular customers
        } else if (customerType.equals("Festival")) {
            return amount * 0.20; // 20% discount during festivals
        }
        return 0; // No discount for unknown types
    }
}
```
### What’s Wrong?
 Every time a new discount type (e.g., "Loyalty", "Black Friday") is introduced, we must modify this class.
 This breaks the Open-Closed Principle because the class is not closed for modification.
 The `if-else` structure makes the class hard to maintain as the number of discount types grows.

---

## Applying OCP – A Better Design

Instead of modifying the existing class, we will use polymorphism by creating a base `Discount` interface
 and implementing different discount types separately.

### Step 1: Define an Interface for Discounts
```java
interface Discount {
    double applyDiscount(double amount);
}
```

### Step 2: Implement Concrete Discount Classes
```java
class RegularDiscount implements Discount {
    @Override
    public double applyDiscount(double amount) {
        return amount * 0.10; // 10% discount
    }
}

class FestivalDiscount implements Discount {
    @Override
    public double applyDiscount(double amount) {
        return amount * 0.20; // 20% discount
    }
}
```

### Step 3: Modify the `DiscountCalculator` to Follow OCP
```java
class DiscountCalculator {
    public double calculateDiscount(Discount discount, double amount) {
        return discount.applyDiscount(amount);
    }
}
```

### Step 4: Test the Code
```java
public class OCPExample {
    public static void main(String[] args) {
        Discount regularDiscount = new RegularDiscount();
        Discount festivalDiscount = new FestivalDiscount();

        DiscountCalculator calculator = new DiscountCalculator();

        System.out.println("Regular Discount on $100: " + calculator.calculateDiscount(regularDiscount, 100));
        System.out.println("Festival Discount on $100: " + calculator.calculateDiscount(festivalDiscount, 100));
    }
}
```

---

## Why is This a Better Approach?
 No need to modify `DiscountCalculator` when adding new discount types.
 Easier to extend – We can introduce a `BlackFridayDiscount` without modifying existing classes.
 Follows OCP – The system is open for extension but closed for modification.

---

## Where is OCP Used in the Real World?
1 Payment Gateways: Adding new payment methods (Credit Card, UPI, PayPal) without modifying existing logic.
2️ Logging Frameworks: New log formats (JSON, XML) can be added as separate implementations.
3️ Design Patterns: Strategy Pattern, Factory Pattern, and Decorator Pattern help in implementing OCP.

---

## Conclusion
 A class should be open for extension but closed for modification.
 Use abstraction and polymorphism to avoid modifying existing code.
 Reduces maintenance cost, improves scalability, and enhances flexibility.
 A must-follow principle for designing robust, scalable software.

